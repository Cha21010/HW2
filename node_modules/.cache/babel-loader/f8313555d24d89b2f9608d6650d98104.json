{"ast":null,"code":"var _jsxFileName = \"/Users/ronghaozeng/HW2/src/App.js\";\nimport React from 'react';\nimport './App.css'; // IMPORT DATA MANAGEMENT AND TRANSACTION STUFF\n\nimport DBManager from './db/DBManager';\nimport jsTPS from './common/jsTPS.js'; // OUR TRANSACTIONS\n\nimport MoveSong_Transaction from './transactions/MoveSong_Transaction.js';\nimport AddSong_Transaction from './transactions/AddSong_Transaction.js';\nimport DeleteSong_Transaction from './transactions/DeleteSong_Transaction.js';\nimport EditSong_Transaction from './transactions/EditSong_Transaction.js'; // THESE REACT COMPONENTS ARE MODALS\n\nimport DeleteListModal from './components/DeleteListModal.js';\nimport DeleteSongModal from './components/DeleteSongModal.js';\nimport EditSongModal from './components/EditSongModal.js'; // THESE REACT COMPONENTS ARE IN OUR UI\n\nimport Banner from './components/Banner.js';\nimport EditToolbar from './components/EditToolbar.js';\nimport PlaylistCards from './components/PlaylistCards.js';\nimport SidebarHeading from './components/SidebarHeading.js';\nimport SidebarList from './components/SidebarList.js';\nimport Statusbar from './components/Statusbar.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // THIS IS OUR TRANSACTION PROCESSING SYSTEM\n\n    this.sortKeyNamePairsByName = keyNamePairs => {\n      keyNamePairs.sort((keyPair1, keyPair2) => {\n        // GET THE LISTS\n        return keyPair1.name.localeCompare(keyPair2.name);\n      });\n    };\n\n    this.createNewList = () => {\n      // FIRST FIGURE OUT WHAT THE NEW LIST'S KEY AND NAME WILL BE\n      let newKey = this.state.sessionData.nextKey;\n      let newName = \"Untitled\" + newKey; // MAKE THE NEW LIST\n\n      let newList = {\n        key: newKey,\n        name: newName,\n        songs: []\n      }; // MAKE THE KEY,NAME OBJECT SO WE CAN KEEP IT IN OUR\n      // SESSION DATA SO IT WILL BE IN OUR LIST OF LISTS\n\n      let newKeyNamePair = {\n        \"key\": newKey,\n        \"name\": newName\n      };\n      let updatedPairs = [...this.state.sessionData.keyNamePairs, newKeyNamePair];\n      this.sortKeyNamePairsByName(updatedPairs); // CHANGE THE APP STATE SO THAT THE CURRENT LIST IS\n      // THIS NEW LIST AND UPDATE THE SESSION DATA SO THAT THE\n      // NEXT LIST CAN BE MADE AS WELL. NOTE, THIS setState WILL\n      // FORCE A CALL TO render, BUT THIS UPDATE IS ASYNCHRONOUS,\n      // SO ANY AFTER EFFECTS THAT NEED TO USE THIS UPDATED STATE\n      // SHOULD BE DONE VIA ITS CALLBACK\n\n      this.setState(prevState => ({\n        listKeyPairMarkedForDeletion: prevState.listKeyPairMarkedForDeletion,\n        currentList: newList,\n        sessionData: {\n          nextKey: prevState.sessionData.nextKey + 1,\n          counter: prevState.sessionData.counter + 1,\n          keyNamePairs: updatedPairs\n        }\n      }), () => {\n        // PUTTING THIS NEW LIST IN PERMANENT STORAGE\n        // IS AN AFTER EFFECT\n        this.db.mutationCreateList(newList); // SO IS STORING OUR SESSION DATA\n\n        this.db.mutationUpdateSessionData(this.state.sessionData);\n      });\n    };\n\n    this.deleteList = key => {\n      // IF IT IS THE CURRENT LIST, CHANGE THAT\n      let newCurrentList = null;\n\n      if (this.state.currentList) {\n        if (this.state.currentList.key !== key) {\n          // THIS JUST MEANS IT'S NOT THE CURRENT LIST BEING\n          // DELETED SO WE'LL KEEP THE CURRENT LIST AS IT IS\n          newCurrentList = this.state.currentList;\n        }\n      }\n\n      let keyIndex = this.state.sessionData.keyNamePairs.findIndex(keyNamePair => {\n        return keyNamePair.key === key;\n      });\n      let newKeyNamePairs = [...this.state.sessionData.keyNamePairs];\n      if (keyIndex >= 0) newKeyNamePairs.splice(keyIndex, 1); // AND FROM OUR APP STATE\n\n      this.setState(prevState => ({\n        listKeyPairMarkedForDeletion: null,\n        currentList: newCurrentList,\n        sessionData: {\n          nextKey: prevState.sessionData.nextKey,\n          counter: prevState.sessionData.counter - 1,\n          keyNamePairs: newKeyNamePairs\n        }\n      }), () => {\n        // DELETING THE LIST FROM PERMANENT STORAGE\n        // IS AN AFTER EFFECT\n        this.db.mutationDeleteList(key); // SO IS STORING OUR SESSION DATA\n\n        this.db.mutationUpdateSessionData(this.state.sessionData);\n      });\n    };\n\n    this.deleteMarkedList = () => {\n      this.deleteList(this.state.listKeyPairMarkedForDeletion.key);\n      this.hideDeleteListModal();\n    };\n\n    this.deleteCurrentList = () => {\n      if (this.state.currentList) {\n        this.deleteList(this.state.currentList.key);\n      }\n    };\n\n    this.renameList = (key, newName) => {\n      let newKeyNamePairs = [...this.state.sessionData.keyNamePairs]; // NOW GO THROUGH THE ARRAY AND FIND THE ONE TO RENAME\n\n      for (let i = 0; i < newKeyNamePairs.length; i++) {\n        let pair = newKeyNamePairs[i];\n\n        if (pair.key === key) {\n          pair.name = newName;\n        }\n      }\n\n      this.sortKeyNamePairsByName(newKeyNamePairs); // WE MAY HAVE TO RENAME THE currentList\n\n      let currentList = this.state.currentList;\n\n      if (currentList.key === key) {\n        currentList.name = newName;\n      }\n\n      this.setState(prevState => ({\n        listKeyPairMarkedForDeletion: null,\n        sessionData: {\n          nextKey: prevState.sessionData.nextKey,\n          counter: prevState.sessionData.counter,\n          keyNamePairs: newKeyNamePairs\n        }\n      }), () => {\n        // AN AFTER EFFECT IS THAT WE NEED TO MAKE SURE\n        // THE TRANSACTION STACK IS CLEARED\n        let list = this.db.queryGetList(key);\n        list.name = newName;\n        this.db.mutationUpdateList(list);\n        this.db.mutationUpdateSessionData(this.state.sessionData);\n      });\n    };\n\n    this.loadList = key => {\n      let newCurrentList = this.db.queryGetList(key);\n      this.setState(prevState => ({\n        listKeyPairMarkedForDeletion: prevState.listKeyPairMarkedForDeletion,\n        currentList: newCurrentList,\n        sessionData: this.state.sessionData\n      }), () => {\n        // AN AFTER EFFECT IS THAT WE NEED TO MAKE SURE\n        // THE TRANSACTION STACK IS CLEARED\n        this.tps.clearAllTransactions();\n      });\n    };\n\n    this.closeCurrentList = () => {\n      this.setState(prevState => ({\n        listKeyPairMarkedForDeletion: prevState.listKeyPairMarkedForDeletion,\n        currentList: null,\n        sessionData: this.state.sessionData\n      }), () => {\n        // AN AFTER EFFECT IS THAT WE NEED TO MAKE SURE\n        // THE TRANSACTION STACK IS CLEARED\n        this.tps.clearAllTransactions();\n      });\n    };\n\n    this.getPlaylistSize = () => {\n      return this.state.currentList.songs.length;\n    };\n\n    this.addMoveSongTransaction = (start, end) => {\n      let transaction = new MoveSong_Transaction(this, start, end);\n      this.tps.addTransaction(transaction);\n    };\n\n    this.addAddSongTransaction = () => {\n      let transaction = new AddSong_Transaction(this);\n      this.tps.addTransaction(transaction);\n    };\n\n    this.addDeleteSongTransaction = () => {\n      let transaction = new DeleteSong_Transaction(this, this.state.SongIndexMarkedForDeletion, this.state.currentList.songs[this.state.SongIndexMarkedForDeletion]);\n      this.tps.addTransaction(transaction);\n    };\n\n    this.addEditSongTransaction = () => {\n      let index = this.state.SongIndexMarkedForEdition;\n      let song = this.state.currentList.songs[index];\n      let newtitle = document.getElementById(\"edit-song-title\").value;\n      let newartist = document.getElementById(\"edit-song-artist\").value;\n      let newyoutubeid = document.getElementById(\"edit-song-youTubeId\").value;\n      let transaction = new EditSong_Transaction(this, index, song, newtitle, newartist, newyoutubeid);\n      this.tps.addTransaction(transaction);\n    };\n\n    this.undo = () => {\n      if (this.tps.hasTransactionToUndo()) {\n        this.tps.undoTransaction(); // MAKE SURE THE LIST GETS PERMANENTLY UPDATED\n\n        this.db.mutationUpdateList(this.state.currentList);\n      }\n    };\n\n    this.redo = () => {\n      if (this.tps.hasTransactionToRedo()) {\n        this.tps.doTransaction(); // MAKE SURE THE LIST GETS PERMANENTLY UPDATED\n\n        this.db.mutationUpdateList(this.state.currentList);\n      }\n    };\n\n    this.editsong = (index, title, artist, youTubeId) => {\n      let song = this.state.currentList.songs[index];\n      song.title = title;\n      song.artist = artist;\n      song.youTubeId = youTubeId;\n      this.setStateWithUpdatedList(this.state.currentList);\n      this.hideEditSongModal();\n    };\n\n    this.markSongForEdition = index => {\n      let song = this.state.currentList.songs[index];\n      let oldtitle = song.title;\n      let oldartist = song.artist;\n      let oldyoutubeId = song.youTubeId;\n      document.getElementById(\"edit-song-title\").value = oldtitle;\n      document.getElementById(\"edit-song-artist\").value = oldartist;\n      document.getElementById(\"edit-song-youTubeId\").value = oldyoutubeId;\n      this.setState(prevState => ({\n        SongIndexMarkedForEdition: index,\n        sessionData: prevState.sessionData\n      }), () => {\n        this.showEditSongModal();\n      });\n    };\n\n    this.markSongForDeletion = index => {\n      let title = this.state.currentList.songs[index].title;\n      this.setState(prevState => ({\n        SongNameMarkedForDeletion: title,\n        SongIndexMarkedForDeletion: index,\n        sessionData: prevState.sessionData\n      }), () => {\n        // PROMPT THE USER\n        this.showDeleteSongModal();\n      });\n    };\n\n    this.markListForDeletion = keyPair => {\n      this.setState(prevState => ({\n        currentList: prevState.currentList,\n        listKeyPairMarkedForDeletion: keyPair,\n        sessionData: prevState.sessionData\n      }), () => {\n        // PROMPT THE USER\n        this.showDeleteListModal();\n      });\n    };\n\n    this.deleteSongTransaction = () => {\n      this.deleteSong(this.state.SongIndexMarkedForDeletion);\n    };\n\n    this.addNewSongAt = (initIndex, InitSong) => {\n      this.state.currentList.songs.splice(initIndex, 0, InitSong);\n      this.setStateWithUpdatedList(this.state.currentList);\n    };\n\n    this.addNewSong = () => {\n      let newSong = {\n        \"title\": \"untitled\",\n        \"artist\": \"unknown\",\n        \"youTubeId\": \"dQw4w9WgXcQ\"\n      };\n      this.state.currentList.songs.push(newSong);\n      this.setStateWithUpdatedList(this.state.currentList);\n    };\n\n    this.removeLastSong = () => {\n      this.state.currentList.songs.pop();\n      this.setStateWithUpdatedList(this.state.currentList);\n    };\n\n    this.deleteSong = index => {\n      this.state.currentList.songs.splice(index, 1);\n      this.setStateWithUpdatedList(this.state.currentList);\n      this.hideDeleteSongModal();\n    };\n\n    this.showEditSongModal = () => {\n      let modal = document.getElementById(\"edit-song-modal\");\n      modal.classList.add(\"is-visible\");\n    };\n\n    this.hideEditSongModal = () => {\n      console.log(\"inside hideEditSongModal\");\n      let modal = document.getElementById(\"edit-song-modal\");\n      modal.classList.remove(\"is-visible\");\n    };\n\n    this.showDeleteSongModal = () => {\n      let modal = document.getElementById(\"delete-song-modal\");\n      modal.classList.add(\"is-visible\");\n    };\n\n    this.hideDeleteSongModal = () => {\n      let modal = document.getElementById(\"delete-song-modal\");\n      modal.classList.remove(\"is-visible\");\n    };\n\n    this.keydownHandler = event => {\n      if (event.keyCode === 90 && (event.ctrlKey || event.metaKey)) {\n        this.undo();\n      } else if (event.keyCode === 89 && (event.ctrlkey || event.metaKey)) {\n        this.redo();\n      }\n    };\n\n    this.tps = new jsTPS(); // THIS WILL TALK TO LOCAL STORAGE\n\n    this.db = new DBManager(); // GET THE SESSION DATA FROM OUR DATA MANAGER\n\n    let loadedSessionData = this.db.queryGetSessionData(); // SETUP THE INITIAL STATE\n\n    this.state = {\n      listKeyPairMarkedForDeletion: null,\n      currentList: null,\n      sessionData: loadedSessionData,\n      SongNameMarkedForDeletion: null,\n      SongIndexMarkedForDeletion: -1,\n      SongIndexMarkedForEdition: -1\n    };\n  }\n\n  setStateWithUpdatedList(list) {\n    this.setState(prevState => ({\n      listKeyPairMarkedForDeletion: prevState.listKeyPairMarkedForDeletion,\n      currentList: list,\n      sessionData: this.state.sessionData\n    }), () => {\n      // UPDATING THE LIST IN PERMANENT STORAGE\n      // IS AN AFTER EFFECT\n      this.db.mutationUpdateList(this.state.currentList);\n    });\n  }\n\n  // THIS FUNCTION MOVES A SONG IN THE CURRENT LIST FROM\n  // start TO end AND ADJUSTS ALL OTHER ITEMS ACCORDINGLY\n  moveSong(start, end) {\n    let list = this.state.currentList; // WE NEED TO UPDATE THE STATE FOR THE APP\n\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = list.songs[start];\n\n      for (let i = start; i < end; i++) {\n        list.songs[i] = list.songs[i + 1];\n      }\n\n      list.songs[end] = temp;\n    } else if (start > end) {\n      let temp = list.songs[start];\n\n      for (let i = start; i > end; i--) {\n        list.songs[i] = list.songs[i - 1];\n      }\n\n      list.songs[end] = temp;\n    }\n\n    this.setStateWithUpdatedList(list);\n  } // THIS FUNCTION ADDS A MoveSong_Transaction TO THE TRANSACTION STACK\n\n\n  showDeleteListModal() {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  } // THIS FUNCTION IS FOR HIDING THE MODAL\n\n\n  hideDeleteListModal() {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  }\n\n  render() {\n    let canAddSong = this.state.currentList !== null;\n    let canUndo = this.tps.hasTransactionToUndo();\n    let canRedo = this.tps.hasTransactionToRedo();\n    let canClose = this.state.currentList !== null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"root\",\n      onKeyDown: this.keydownHandler,\n      children: [/*#__PURE__*/_jsxDEV(Banner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SidebarHeading, {\n        createNewListCallback: this.createNewList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SidebarList, {\n        currentList: this.state.currentList,\n        keyNamePairs: this.state.sessionData.keyNamePairs,\n        deleteListCallback: this.markListForDeletion,\n        loadListCallback: this.loadList,\n        renameListCallback: this.renameList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(EditToolbar, {\n        canAddSong: canAddSong,\n        canUndo: canUndo,\n        canRedo: canRedo,\n        canClose: canClose,\n        undoCallback: this.undo,\n        redoCallback: this.redo,\n        closeCallback: this.closeCurrentList,\n        addSongCallback: this.addAddSongTransaction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PlaylistCards, {\n        currentList: this.state.currentList,\n        moveSongCallback: this.addMoveSongTransaction,\n        deleteSongCallback: this.markSongForDeletion,\n        editSongCallback: this.markSongForEdition\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Statusbar, {\n        currentList: this.state.currentList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DeleteListModal, {\n        listKeyPair: this.state.listKeyPairMarkedForDeletion,\n        hideDeleteListModalCallback: this.hideDeleteListModal,\n        deleteListCallback: this.deleteMarkedList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DeleteSongModal, {\n        hideDeleteSongModalCallback: this.hideDeleteSongModal,\n        SongNameMarkedForDeletion: this.state.SongNameMarkedForDeletion,\n        deleteSongCallback: this.addDeleteSongTransaction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(EditSongModal, {\n        hideEditSongModalCallback: this.hideEditSongModal,\n        editSongCallback: this.addEditSongTransaction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","DBManager","jsTPS","MoveSong_Transaction","AddSong_Transaction","DeleteSong_Transaction","EditSong_Transaction","DeleteListModal","DeleteSongModal","EditSongModal","Banner","EditToolbar","PlaylistCards","SidebarHeading","SidebarList","Statusbar","App","Component","constructor","props","sortKeyNamePairsByName","keyNamePairs","sort","keyPair1","keyPair2","name","localeCompare","createNewList","newKey","state","sessionData","nextKey","newName","newList","key","songs","newKeyNamePair","updatedPairs","setState","prevState","listKeyPairMarkedForDeletion","currentList","counter","db","mutationCreateList","mutationUpdateSessionData","deleteList","newCurrentList","keyIndex","findIndex","keyNamePair","newKeyNamePairs","splice","mutationDeleteList","deleteMarkedList","hideDeleteListModal","deleteCurrentList","renameList","i","length","pair","list","queryGetList","mutationUpdateList","loadList","tps","clearAllTransactions","closeCurrentList","getPlaylistSize","addMoveSongTransaction","start","end","transaction","addTransaction","addAddSongTransaction","addDeleteSongTransaction","SongIndexMarkedForDeletion","addEditSongTransaction","index","SongIndexMarkedForEdition","song","newtitle","document","getElementById","value","newartist","newyoutubeid","undo","hasTransactionToUndo","undoTransaction","redo","hasTransactionToRedo","doTransaction","editsong","title","artist","youTubeId","setStateWithUpdatedList","hideEditSongModal","markSongForEdition","oldtitle","oldartist","oldyoutubeId","showEditSongModal","markSongForDeletion","SongNameMarkedForDeletion","showDeleteSongModal","markListForDeletion","keyPair","showDeleteListModal","deleteSongTransaction","deleteSong","addNewSongAt","initIndex","InitSong","addNewSong","newSong","push","removeLastSong","pop","hideDeleteSongModal","modal","classList","add","console","log","remove","keydownHandler","event","keyCode","ctrlKey","metaKey","ctrlkey","loadedSessionData","queryGetSessionData","moveSong","temp","render","canAddSong","canUndo","canRedo","canClose"],"sources":["/Users/ronghaozeng/HW2/src/App.js"],"sourcesContent":["import React from 'react';\nimport './App.css';\n\n// IMPORT DATA MANAGEMENT AND TRANSACTION STUFF\nimport DBManager from './db/DBManager';\nimport jsTPS from './common/jsTPS.js';\n// OUR TRANSACTIONS\nimport MoveSong_Transaction from './transactions/MoveSong_Transaction.js';\nimport AddSong_Transaction from './transactions/AddSong_Transaction.js';\nimport DeleteSong_Transaction from './transactions/DeleteSong_Transaction.js';\nimport EditSong_Transaction from './transactions/EditSong_Transaction.js';\n\n// THESE REACT COMPONENTS ARE MODALS\nimport DeleteListModal from './components/DeleteListModal.js';\nimport DeleteSongModal from './components/DeleteSongModal.js';\nimport EditSongModal from './components/EditSongModal.js';\n\n\n// THESE REACT COMPONENTS ARE IN OUR UI\nimport Banner from './components/Banner.js';\nimport EditToolbar from './components/EditToolbar.js';\nimport PlaylistCards from './components/PlaylistCards.js';\nimport SidebarHeading from './components/SidebarHeading.js';\nimport SidebarList from './components/SidebarList.js';\nimport Statusbar from './components/Statusbar.js';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n    \n        // THIS IS OUR TRANSACTION PROCESSING SYSTEM\n        this.tps = new jsTPS();\n\n        // THIS WILL TALK TO LOCAL STORAGE\n        this.db = new DBManager();\n\n        // GET THE SESSION DATA FROM OUR DATA MANAGER\n        let loadedSessionData = this.db.queryGetSessionData();\n\n        // SETUP THE INITIAL STATE\n        this.state = {\n            listKeyPairMarkedForDeletion : null,\n            currentList : null,\n            sessionData : loadedSessionData,\n            SongNameMarkedForDeletion : null,\n            SongIndexMarkedForDeletion: -1,\n            SongIndexMarkedForEdition: -1\n\n        }\n    }\n    sortKeyNamePairsByName = (keyNamePairs) => {\n        keyNamePairs.sort((keyPair1, keyPair2) => {\n            // GET THE LISTS\n            return keyPair1.name.localeCompare(keyPair2.name);\n        });\n    }\n    // THIS FUNCTION BEGINS THE PROCESS OF CREATING A NEW LIST\n    createNewList = () => {\n        // FIRST FIGURE OUT WHAT THE NEW LIST'S KEY AND NAME WILL BE\n        let newKey = this.state.sessionData.nextKey;\n        let newName = \"Untitled\" + newKey;\n\n        // MAKE THE NEW LIST\n        let newList = {\n            key: newKey,\n            name: newName,\n            songs: []\n        };\n\n        // MAKE THE KEY,NAME OBJECT SO WE CAN KEEP IT IN OUR\n        // SESSION DATA SO IT WILL BE IN OUR LIST OF LISTS\n        let newKeyNamePair = { \"key\": newKey, \"name\": newName };\n        let updatedPairs = [...this.state.sessionData.keyNamePairs, newKeyNamePair];\n        this.sortKeyNamePairsByName(updatedPairs);\n\n        // CHANGE THE APP STATE SO THAT THE CURRENT LIST IS\n        // THIS NEW LIST AND UPDATE THE SESSION DATA SO THAT THE\n        // NEXT LIST CAN BE MADE AS WELL. NOTE, THIS setState WILL\n        // FORCE A CALL TO render, BUT THIS UPDATE IS ASYNCHRONOUS,\n        // SO ANY AFTER EFFECTS THAT NEED TO USE THIS UPDATED STATE\n        // SHOULD BE DONE VIA ITS CALLBACK\n        this.setState(prevState => ({\n            listKeyPairMarkedForDeletion : prevState.listKeyPairMarkedForDeletion,\n            currentList: newList,\n            sessionData: {\n                nextKey: prevState.sessionData.nextKey + 1,\n                counter: prevState.sessionData.counter + 1,\n                keyNamePairs: updatedPairs\n            }\n        }), () => {\n            // PUTTING THIS NEW LIST IN PERMANENT STORAGE\n            // IS AN AFTER EFFECT\n            this.db.mutationCreateList(newList);\n\n            // SO IS STORING OUR SESSION DATA\n            this.db.mutationUpdateSessionData(this.state.sessionData);\n        });\n    }\n    // THIS FUNCTION BEGINS THE PROCESS OF DELETING A LIST.\n    deleteList = (key) => {\n        // IF IT IS THE CURRENT LIST, CHANGE THAT\n        let newCurrentList = null;\n        if (this.state.currentList) {\n            if (this.state.currentList.key !== key) {\n                // THIS JUST MEANS IT'S NOT THE CURRENT LIST BEING\n                // DELETED SO WE'LL KEEP THE CURRENT LIST AS IT IS\n                newCurrentList = this.state.currentList;\n            }\n        }\n\n        let keyIndex = this.state.sessionData.keyNamePairs.findIndex((keyNamePair) => {\n            return (keyNamePair.key === key);\n        });\n        let newKeyNamePairs = [...this.state.sessionData.keyNamePairs];\n        if (keyIndex >= 0)\n            newKeyNamePairs.splice(keyIndex, 1);\n\n        // AND FROM OUR APP STATE\n        this.setState(prevState => ({\n            listKeyPairMarkedForDeletion : null,\n            currentList: newCurrentList,\n            sessionData: {\n                nextKey: prevState.sessionData.nextKey,\n                counter: prevState.sessionData.counter - 1,\n                keyNamePairs: newKeyNamePairs\n            }\n        }), () => {\n            // DELETING THE LIST FROM PERMANENT STORAGE\n            // IS AN AFTER EFFECT\n            this.db.mutationDeleteList(key);\n\n            // SO IS STORING OUR SESSION DATA\n            this.db.mutationUpdateSessionData(this.state.sessionData);\n        });\n    }\n    deleteMarkedList = () => {\n        this.deleteList(this.state.listKeyPairMarkedForDeletion.key);\n        this.hideDeleteListModal();\n    }\n    // THIS FUNCTION SPECIFICALLY DELETES THE CURRENT LIST\n    deleteCurrentList = () => {\n        if (this.state.currentList) {\n            this.deleteList(this.state.currentList.key);\n        }\n    }\n    renameList = (key, newName) => {\n        let newKeyNamePairs = [...this.state.sessionData.keyNamePairs];\n        // NOW GO THROUGH THE ARRAY AND FIND THE ONE TO RENAME\n        for (let i = 0; i < newKeyNamePairs.length; i++) {\n            let pair = newKeyNamePairs[i];\n            if (pair.key === key) {\n                pair.name = newName;\n            }\n        }\n        this.sortKeyNamePairsByName(newKeyNamePairs);\n\n        // WE MAY HAVE TO RENAME THE currentList\n        let currentList = this.state.currentList;\n        if (currentList.key === key) {\n            currentList.name = newName;\n        }\n\n        this.setState(prevState => ({\n            listKeyPairMarkedForDeletion : null,\n            sessionData: {\n                nextKey: prevState.sessionData.nextKey,\n                counter: prevState.sessionData.counter,\n                keyNamePairs: newKeyNamePairs\n            }\n        }), () => {\n            // AN AFTER EFFECT IS THAT WE NEED TO MAKE SURE\n            // THE TRANSACTION STACK IS CLEARED\n            let list = this.db.queryGetList(key);\n            list.name = newName;\n            this.db.mutationUpdateList(list);\n            this.db.mutationUpdateSessionData(this.state.sessionData);\n        });\n    }\n    // THIS FUNCTION BEGINS THE PROCESS OF LOADING A LIST FOR EDITING\n    loadList = (key) => {\n        let newCurrentList = this.db.queryGetList(key);\n        this.setState(prevState => ({\n            listKeyPairMarkedForDeletion : prevState.listKeyPairMarkedForDeletion,\n            currentList: newCurrentList,\n            sessionData: this.state.sessionData\n        }), () => {\n            // AN AFTER EFFECT IS THAT WE NEED TO MAKE SURE\n            // THE TRANSACTION STACK IS CLEARED\n            this.tps.clearAllTransactions();\n        });\n    }\n    // THIS FUNCTION BEGINS THE PROCESS OF CLOSING THE CURRENT LIST\n    closeCurrentList = () => {\n        this.setState(prevState => ({\n            listKeyPairMarkedForDeletion : prevState.listKeyPairMarkedForDeletion,\n            currentList: null,\n            sessionData: this.state.sessionData\n        }), () => {\n            // AN AFTER EFFECT IS THAT WE NEED TO MAKE SURE\n            // THE TRANSACTION STACK IS CLEARED\n            this.tps.clearAllTransactions();\n        });\n    }\n    setStateWithUpdatedList(list) {\n        this.setState(prevState => ({\n            listKeyPairMarkedForDeletion : prevState.listKeyPairMarkedForDeletion,\n            currentList : list,\n            sessionData : this.state.sessionData\n        }), () => {\n            // UPDATING THE LIST IN PERMANENT STORAGE\n            // IS AN AFTER EFFECT\n            this.db.mutationUpdateList(this.state.currentList);\n        });\n    }\n    getPlaylistSize = () => {\n        return this.state.currentList.songs.length;\n    }\n    // THIS FUNCTION MOVES A SONG IN THE CURRENT LIST FROM\n    // start TO end AND ADJUSTS ALL OTHER ITEMS ACCORDINGLY\n    moveSong(start, end) {\n        let list = this.state.currentList;\n\n        // WE NEED TO UPDATE THE STATE FOR THE APP\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = list.songs[start];\n            for (let i = start; i < end; i++) {\n                list.songs[i] = list.songs[i + 1];\n            }\n            list.songs[end] = temp;\n        }\n        else if (start > end) {\n            let temp = list.songs[start];\n            for (let i = start; i > end; i--) {\n                list.songs[i] = list.songs[i - 1];\n            }\n            list.songs[end] = temp;\n        }\n        this.setStateWithUpdatedList(list);\n    }\n    \n    \n    // THIS FUNCTION ADDS A MoveSong_Transaction TO THE TRANSACTION STACK\n    addMoveSongTransaction = (start, end) => {\n        let transaction = new MoveSong_Transaction(this, start, end);\n        this.tps.addTransaction(transaction);\n    }\n    addAddSongTransaction = ()=>{\n        let transaction = new AddSong_Transaction(this);\n        this.tps.addTransaction(transaction);\n    }\n    addDeleteSongTransaction = () =>{\n        let transaction  = new DeleteSong_Transaction(this,this.state.SongIndexMarkedForDeletion,this.state.currentList.songs[this.state.SongIndexMarkedForDeletion]);\n        this.tps.addTransaction(transaction);\n    }\n    addEditSongTransaction = () =>{\n        let index = this.state.SongIndexMarkedForEdition;\n        let song = this.state.currentList.songs[index];\n        let newtitle = document.getElementById(\"edit-song-title\").value;\n        let newartist = document.getElementById(\"edit-song-artist\").value; \n        let newyoutubeid = document.getElementById(\"edit-song-youTubeId\").value;\n        let transaction = new EditSong_Transaction(this,index,song,newtitle,newartist,newyoutubeid);\n        this.tps.addTransaction(transaction);\n    }\n\n\n    // THIS FUNCTION BEGINS THE PROCESS OF PERFORMING AN UNDO\n    undo = () => {\n        if (this.tps.hasTransactionToUndo()) {\n            this.tps.undoTransaction();\n\n            // MAKE SURE THE LIST GETS PERMANENTLY UPDATED\n            this.db.mutationUpdateList(this.state.currentList);\n        }\n    }\n    // THIS FUNCTION BEGINS THE PROCESS OF PERFORMING A REDO\n    redo = () => {\n        if (this.tps.hasTransactionToRedo()) {\n            this.tps.doTransaction();\n\n            // MAKE SURE THE LIST GETS PERMANENTLY UPDATED\n            this.db.mutationUpdateList(this.state.currentList);\n        }\n    }\n    \n    \n    editsong = (index,title,artist,youTubeId) =>{\n        let song = this.state.currentList.songs[index];\n        song.title = title;\n        song.artist = artist;\n        song.youTubeId = youTubeId;\n        this.setStateWithUpdatedList(this.state.currentList);\n        this.hideEditSongModal();\n    }\n    \n    markSongForEdition = (index) =>{\n        let song = this.state.currentList.songs[index];\n        let oldtitle = song.title;\n        let oldartist = song.artist;\n        let oldyoutubeId = song.youTubeId;\n        document.getElementById(\"edit-song-title\").value = oldtitle;\n        document.getElementById(\"edit-song-artist\").value = oldartist;\n        document.getElementById(\"edit-song-youTubeId\").value = oldyoutubeId;\n        this.setState(prevState => ({\n            SongIndexMarkedForEdition : index,\n            sessionData:prevState.sessionData\n        }),\n        () => {\n            this.showEditSongModal();\n        });\n    }\n    markSongForDeletion = (index) =>{\n        let title = this.state.currentList.songs[index].title;\n        this.setState(prevState => ({\n            SongNameMarkedForDeletion : title,\n            SongIndexMarkedForDeletion: index,\n            sessionData: prevState.sessionData\n        }), () => {\n            // PROMPT THE USER\n            this.showDeleteSongModal();\n        });\n    }\n    markListForDeletion = (keyPair) => {\n        this.setState(prevState => ({\n            currentList: prevState.currentList,\n            listKeyPairMarkedForDeletion : keyPair,\n            sessionData: prevState.sessionData\n        }), () => {\n            // PROMPT THE USER\n            this.showDeleteListModal();\n        });\n    }\n    \n    \n    deleteSongTransaction = () =>{\n        this.deleteSong(this.state.SongIndexMarkedForDeletion);\n    }\n\n    addNewSongAt  = (initIndex,InitSong) =>{\n        this.state.currentList.songs.splice(initIndex,0,InitSong);\n        this.setStateWithUpdatedList(this.state.currentList);\n    }\n    addNewSong = ()=>{\n        let newSong = {\"title\":\"untitled\" ,\"artist\":\"unknown\",\"youTubeId\":\"dQw4w9WgXcQ\"};\n        this.state.currentList.songs.push(newSong);\n        this.setStateWithUpdatedList(this.state.currentList);\n    }\n\n    removeLastSong = ()=>{\n        this.state.currentList.songs.pop();\n        this.setStateWithUpdatedList(this.state.currentList);\n    }\n\n    deleteSong = (index) =>{\n        this.state.currentList.songs.splice(index,1);\n        this.setStateWithUpdatedList(this.state.currentList);\n        this.hideDeleteSongModal();\n    }\n    \n    \n    showEditSongModal = ()=>{\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n    hideEditSongModal = ()=>{\n        console.log(\"inside hideEditSongModal\")\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n    showDeleteSongModal=()=> {\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n    // THIS FUNCTION IS FOR HIDING THE MODAL\n    hideDeleteSongModal = ()=> {\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    keydownHandler = (event) => {\n        if(event.keyCode === 90 && (event.ctrlKey||event.metaKey)){\n            this.undo();\n        }\n        else if(event.keyCode === 89 && (event.ctrlkey||event.metaKey)){\n            this.redo();\n        }\n    }\n   \n    \n    showDeleteListModal() {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n    // THIS FUNCTION IS FOR HIDING THE MODAL\n    hideDeleteListModal() {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n\n    render() {\n        let canAddSong = this.state.currentList !== null;\n        let canUndo = this.tps.hasTransactionToUndo();\n        let canRedo = this.tps.hasTransactionToRedo();\n        let canClose = this.state.currentList !== null;\n        return (\n            <div id=\"root\" onKeyDown = {this.keydownHandler}>\n                <Banner />\n                <SidebarHeading\n                    createNewListCallback={this.createNewList}\n                />\n                <SidebarList\n                    currentList={this.state.currentList}\n                    keyNamePairs={this.state.sessionData.keyNamePairs}\n                    deleteListCallback={this.markListForDeletion}\n                    loadListCallback={this.loadList}\n                    renameListCallback={this.renameList}\n                />\n                <EditToolbar\n                    canAddSong={canAddSong}\n                    canUndo={canUndo}\n                    canRedo={canRedo}\n                    canClose={canClose} \n                    undoCallback={this.undo}\n                    redoCallback={this.redo}\n                    closeCallback={this.closeCurrentList}\n                    addSongCallback = {this.addAddSongTransaction}\n                />\n                <PlaylistCards\n                    currentList={this.state.currentList}\n                    moveSongCallback={this.addMoveSongTransaction} \n                    deleteSongCallback = {this.markSongForDeletion}\n                    editSongCallback = {this.markSongForEdition}\n                    />\n                <Statusbar \n                    currentList={this.state.currentList} />\n                <DeleteListModal\n                    listKeyPair={this.state.listKeyPairMarkedForDeletion}\n                    hideDeleteListModalCallback={this.hideDeleteListModal}\n                    deleteListCallback={this.deleteMarkedList}\n                \n                />\n                <DeleteSongModal\n                    hideDeleteSongModalCallback={this.hideDeleteSongModal}\n                    SongNameMarkedForDeletion={this.state.SongNameMarkedForDeletion}\n                    deleteSongCallback = {this.addDeleteSongTransaction}\n                />\n                <EditSongModal\n                hideEditSongModalCallback = {this.hideEditSongModal}\n                editSongCallback = {this.addEditSongTransaction}\n                />\n                \n            </div>\n        );\n    }\n\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}